
/** Array based list.
 *  @author Josh Hug
 */

public class AList<Type> {

    Type[] AList;
    int size;

    /** Creates an empty list. */
    public AList() {
        AList = (Type[]) new Object[1];
        size = 0;
    }

    /** To resize the size of the AList. */
    public void resize(int newSize) {
        Type[] temp = (Type[]) new Object[newSize];
        System.arraycopy(AList, 0, temp, 0, size);
        AList = temp;
    }

    /** Inserts X into the back of the list. */
    public void addLast(Type x) {
        if (size == AList.length) {
            resize(size * 2);
        }
        AList[size] = x;
        size = size + 1;
    }

    /** Returns the item from the back of the list. */
    public Type getLast() {
        return AList[size - 1];
    }
    /** Gets the ith item in the list (0 is the front). */
    public Type get(int i) {
        return AList[i];
    }

    /** Returns the number of items in the list. */
    public int size() {
        return size;
    }

    /** Deletes item from back of the list and
     * returns deleted item. */
    public Type removeLast() {
        Type x = AList[size - 1];
        AList[size - 1] = null;
        size = size - 1;
        if ((double) size / AList.length < 0.25) {
            resize(size / 2);
        }
        return x;
    }
}